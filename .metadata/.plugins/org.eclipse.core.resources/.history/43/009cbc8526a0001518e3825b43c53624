package finalproject;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Random;
import java.util.Scanner;

import static betterutils.BetterUtils.*;
public class DoesItHaveLegs
{	
	/**
	 * loads a previous binary tree
	 * @return - binary tree
	 */
	public static BinaryTree loadTree()
	{
		try
		{

			FileInputStream fileInput = new FileInputStream("binaryTree.ser");
			ObjectInputStream objectInput = new ObjectInputStream(fileInput);
			BinaryTree binaryTree = (BinaryTree) objectInput.readObject();
			objectInput.close();

			return binaryTree;

		}
		catch (Exception e)
		{
			e.printStackTrace();
			return null;
		} 
	} 
	/**
	 * saves a binary tree
	 * @param binaryTree - binary tree to be saved
	 */
	public static void saveTree(BinaryTree binaryTree)
	{
		try
		{

			FileOutputStream fileOut = new FileOutputStream("binaryTree.ser");
			ObjectOutputStream objectOut = new ObjectOutputStream(fileOut);
			objectOut.writeObject(binaryTree);
			objectOut.close();

		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	/**
	 * evolving computer game where the computer learns... 
	 * @param binaryTree - class of binary tree for computer to learn in
	 * @param keyboard - scanner keyboard so i can close the keyboard
	 * @return - returns itself or null to keep learning
	 */
	public static Object game(BinaryTree binaryTree, Scanner keyboard)
	{	
		String userChoice;
		Node currentNode = binaryTree.getRoot();
		String data;
		String newAnimal;
		String oldAnimal;
		while(true)
		{
			try
			{
				data = currentNode.getData();
				if(data.equalsIgnoreCase("yes"))
				{
					currentNode = currentNode.getRight();
				}
				else if(data.equalsIgnoreCase("no"))
				{
					currentNode = currentNode.getLeft();
				}
				else if(data.equalsIgnoreCase("Yay! I Win! Lets Play Again."))
				{	
					println(currentNode.getData());
					while(currentNode.getIsRoot() == false)
					{
						currentNode = currentNode.getParent();
					}
					binaryTree.setRoot(currentNode);
					return game(binaryTree, keyboard);
				}
				else if(data.equalsIgnoreCase("I give up what is it?"))
				{
					println(currentNode.getData());
					newAnimal = keyboard.nextLine();
					currentNode = currentNode.getParent().getParent();
					System.out.printf("What is a question where the answer "
							+ "is yes for %s and no for %s.", newAnimal, 
							currentNode.getDataType());
					oldAnimal = currentNode.getDataType();
					userChoice = keyboard.nextLine();
					currentNode.setData(userChoice);
					currentNode.setLeft("No");
					currentNode.getLeft().setLeft("Is it a " + oldAnimal +
							"?");
					currentNode.getLeft().getLeft().setDataType(oldAnimal);
					currentNode = currentNode.getLeft();
					currentNode.getLeft().setLeft("No");
					currentNode.getLeft().getLeft().setLeft("I "
							+ "give up what is it?");
					currentNode = currentNode.getParent();
					currentNode.setRight("Yes");
					currentNode = currentNode.getRight();
					currentNode.setRight("Is it a " + newAnimal +"?");
					currentNode.getRight().setDataType(newAnimal);
					currentNode = currentNode.getRight();
					currentNode.setRight("Yes");
					currentNode.setLeft("No");
					currentNode.getRight().setRight("Yay! I Win! Lets Play"
							+ " Again.");
					currentNode.getLeft().setLeft("I give up what is it?");
					while(currentNode.getIsRoot() == false)
					{
						
						currentNode = currentNode.getParent();
					}
					binaryTree.setRoot(currentNode);
					return game(binaryTree, keyboard);
				}
				else
				{
					println(currentNode.getData());
					userChoice = keyboard.nextLine();;
					if(userChoice.equalsIgnoreCase("tree"))
					{
						while(currentNode.getIsRoot() == false)
						{
							
							currentNode = currentNode.getParent();
						}
						binaryTree.setRoot(currentNode);
						binaryTree.buildTree();
						return null;
					}
					if(userChoice.equalsIgnoreCase("quit"))
					{
						Random rand = new Random();
						int random = rand.nextInt(10) + 1;
						if(random >= 5)
						{
							
						}
						else
						{
							println("Noooooooo, hrhgh-h.. helppppp hraguh.. your kill"
									+ "ing hrhghhg.. me... aaaarrrgghhhhh....");
							smallFlatline();
						}
						return null;
					}
					if(userChoice.equalsIgnoreCase("save"))
					{
						while(currentNode.getIsRoot() == false)
						{
							
							currentNode = currentNode.getParent();
						}
						binaryTree.setRoot(currentNode);
						binaryTree.buildTree();
						saveTree(binaryTree);
						return null;
					}
					currentNode = currentNode.whichChild(userChoice);
				}
			}
			catch (Exception e)
			{
				Random rand = new Random();
				int random = rand.nextInt(10) + 1;
				if(random >= 5)
				{
					println("Sorry, but there was some null error.");
				}
				else
				{
					println("Noooooooo, hrhgh-h.. helppppp hraguh.. your kill"
							+ "ing hrhghhg.. me... aaaarrrgghhhhh....");
					smallFlatline();
				}
				
				int errorTrace = keyboard.nextInt();
				if(errorTrace == 1)
				{
					e.printStackTrace();
				}
				return null;
			}
		}
	}
	public static void miniGame(Scanner keyboard)
	{
		Random rand = new Random();
		{
			if(rand.nextBoolean())
			{
				RockPaperScissors fun = new RockPaperScissors();
				fun.rules();
				fun.beginGame();	
			}
			else
			{
				BlackJack fun = new BlackJack();
				fun.displayDescription();
				fun.deal();
				println("Do you want to hit or stay");
				String userChoice = keyboard.nextLine().toLowerCase();
				while(userChoice.equals("hit"))
				{
					fun.hit();
					println("Do you want to hit or stay");
					userChoice = keyboard.nextLine().toLowerCase();
				}
				fun.stay();
			}
		}
	}
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in);
		BinaryTree binaryTree = new BinaryTree("Does it have legs?");
		String userChoice;
		println("Do you want to start a new game or load one?");
		userChoice = keyboard.nextLine();
		switch(userChoice)
		{
			case "Preston Is King":
				miniGame(keyboard);
				break;
			default:
				if(userChoice.equalsIgnoreCase("load"))
				{
					binaryTree = loadTree();
				}
				else
				{
					Node currentNode = binaryTree.getRoot();
					currentNode.setLeft("No");
					currentNode.setRight("Yes");
					currentNode.getRight().setRight("Is it a dog?");
					currentNode.getRight().getRight().setDataType("Dog");
					currentNode.getRight().getRight().setRight("Yes");
					currentNode.getRight().getRight().setLeft("No");
					currentNode.getRight().getRight().getRight().setRight("Yay! I W"
							+ "in! "
							+ "Lets Play Again.");
					currentNode.getRight().getRight().getLeft().setLeft("I give up w"
							+ "hat"
							+ " is it?");
					currentNode.getLeft().setLeft("Is it a Snake?");
					currentNode.getLeft().getLeft().setDataType("Snake");
					currentNode.getLeft().getLeft().setRight("Yes");
					currentNode.getLeft().getLeft().setLeft("No");
					currentNode.getLeft().getLeft().getRight().setRight("Yay! I Win"
							+ "! "
							+ "Lets Play Again.");
					currentNode.getLeft().getLeft().getLeft().setLeft("I give up wh"
							+ "at"
							+ " is it?");
				}
				game(binaryTree, keyboard);
				keyboard.close();
		}
	}
}
